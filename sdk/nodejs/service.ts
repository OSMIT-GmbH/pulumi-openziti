// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Service {
        return new Service(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'openziti:index:Service';

    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Service {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }

    public /*out*/ readonly _links!: pulumi.Output<{[key: string]: outputs.Link}>;
    public /*out*/ readonly config!: pulumi.Output<{[key: string]: {[key: string]: any}}>;
    public readonly configs!: pulumi.Output<string[]>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly encryptionRequired!: pulumi.Output<boolean>;
    public /*out*/ readonly id!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly permissions!: pulumi.Output<string[]>;
    public /*out*/ readonly postureQueries!: pulumi.Output<outputs.PostureQueriesType[]>;
    public readonly roleAttributes!: pulumi.Output<string[]>;
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly terminatorStrategy!: pulumi.Output<string>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.configs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configs'");
            }
            if ((!args || args.encryptionRequired === undefined) && !opts.urn) {
                throw new Error("Missing required property 'encryptionRequired'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.roleAttributes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleAttributes'");
            }
            resourceInputs["configs"] = args ? args.configs : undefined;
            resourceInputs["encryptionRequired"] = args ? args.encryptionRequired : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roleAttributes"] = args ? args.roleAttributes : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["terminatorStrategy"] = args ? args.terminatorStrategy : undefined;
            resourceInputs["_links"] = undefined /*out*/;
            resourceInputs["config"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["id"] = undefined /*out*/;
            resourceInputs["permissions"] = undefined /*out*/;
            resourceInputs["postureQueries"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        } else {
            resourceInputs["_links"] = undefined /*out*/;
            resourceInputs["config"] = undefined /*out*/;
            resourceInputs["configs"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["encryptionRequired"] = undefined /*out*/;
            resourceInputs["id"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["permissions"] = undefined /*out*/;
            resourceInputs["postureQueries"] = undefined /*out*/;
            resourceInputs["roleAttributes"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["terminatorStrategy"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Service.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    configs: pulumi.Input<pulumi.Input<string>[]>;
    encryptionRequired: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    roleAttributes: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: any}>;
    terminatorStrategy?: pulumi.Input<string>;
}
