// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ConfigObjArgs } from "./configObj";
export type ConfigObj = import("./configObj").ConfigObj;
export const ConfigObj: typeof import("./configObj").ConfigObj = null as any;
utilities.lazyLoad(exports, ["ConfigObj"], () => require("./configObj"));

export { IdentityArgs } from "./identity";
export type Identity = import("./identity").Identity;
export const Identity: typeof import("./identity").Identity = null as any;
utilities.lazyLoad(exports, ["Identity"], () => require("./identity"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ServiceArgs } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { ServicePolicyArgs } from "./servicePolicy";
export type ServicePolicy = import("./servicePolicy").ServicePolicy;
export const ServicePolicy: typeof import("./servicePolicy").ServicePolicy = null as any;
utilities.lazyLoad(exports, ["ServicePolicy"], () => require("./servicePolicy"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "openziti:index:ConfigObj":
                return new ConfigObj(name, <any>undefined, { urn })
            case "openziti:index:Identity":
                return new Identity(name, <any>undefined, { urn })
            case "openziti:index:Service":
                return new Service(name, <any>undefined, { urn })
            case "openziti:index:ServicePolicy":
                return new ServicePolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("openziti", "index", _module)
pulumi.runtime.registerResourcePackage("openziti", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:openziti") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
