# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = ['ServiceEdgeRouterPolicyArgs', 'ServiceEdgeRouterPolicy']

@pulumi.input_type
class ServiceEdgeRouterPolicyArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 semantic: pulumi.Input[str],
                 service_roles: pulumi.Input[Sequence[pulumi.Input[str]]],
                 edge_router_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a ServiceEdgeRouterPolicy resource.
        """
        ServiceEdgeRouterPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            semantic=semantic,
            service_roles=service_roles,
            edge_router_roles=edge_router_roles,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             semantic: pulumi.Input[str],
             service_roles: pulumi.Input[Sequence[pulumi.Input[str]]],
             edge_router_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("semantic", semantic)
        _setter("service_roles", service_roles)
        if edge_router_roles is not None:
            _setter("edge_router_roles", edge_router_roles)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def semantic(self) -> pulumi.Input[str]:
        return pulumi.get(self, "semantic")

    @semantic.setter
    def semantic(self, value: pulumi.Input[str]):
        pulumi.set(self, "semantic", value)

    @property
    @pulumi.getter(name="serviceRoles")
    def service_roles(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "service_roles")

    @service_roles.setter
    def service_roles(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "service_roles", value)

    @property
    @pulumi.getter(name="edgeRouterRoles")
    def edge_router_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "edge_router_roles")

    @edge_router_roles.setter
    def edge_router_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "edge_router_roles", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)


class ServiceEdgeRouterPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 edge_router_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 semantic: Optional[pulumi.Input[str]] = None,
                 service_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        """
        Create a ServiceEdgeRouterPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceEdgeRouterPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ServiceEdgeRouterPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ServiceEdgeRouterPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceEdgeRouterPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            ServiceEdgeRouterPolicyArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 edge_router_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 semantic: Optional[pulumi.Input[str]] = None,
                 service_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceEdgeRouterPolicyArgs.__new__(ServiceEdgeRouterPolicyArgs)

            __props__.__dict__["edge_router_roles"] = edge_router_roles
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if semantic is None and not opts.urn:
                raise TypeError("Missing required property 'semantic'")
            __props__.__dict__["semantic"] = semantic
            if service_roles is None and not opts.urn:
                raise TypeError("Missing required property 'service_roles'")
            __props__.__dict__["service_roles"] = service_roles
            __props__.__dict__["tags"] = tags
            __props__.__dict__["_assimilated"] = None
            __props__.__dict__["_links"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["edge_router_roles_display"] = None
            __props__.__dict__["id"] = None
            __props__.__dict__["service_roles_display"] = None
            __props__.__dict__["updated_at"] = None
        super(ServiceEdgeRouterPolicy, __self__).__init__(
            'openziti:index:ServiceEdgeRouterPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ServiceEdgeRouterPolicy':
        """
        Get an existing ServiceEdgeRouterPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ServiceEdgeRouterPolicyArgs.__new__(ServiceEdgeRouterPolicyArgs)

        __props__.__dict__["_assimilated"] = None
        __props__.__dict__["_links"] = None
        __props__.__dict__["created_at"] = None
        __props__.__dict__["edge_router_roles"] = None
        __props__.__dict__["edge_router_roles_display"] = None
        __props__.__dict__["id"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["semantic"] = None
        __props__.__dict__["service_roles"] = None
        __props__.__dict__["service_roles_display"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["updated_at"] = None
        return ServiceEdgeRouterPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def _assimilated(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "_assimilated")

    @property
    @pulumi.getter
    def _links(self) -> pulumi.Output[Mapping[str, 'outputs.Link']]:
        return pulumi.get(self, "_links")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="edgeRouterRoles")
    def edge_router_roles(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "edge_router_roles")

    @property
    @pulumi.getter(name="edgeRouterRolesDisplay")
    def edge_router_roles_display(self) -> pulumi.Output[Sequence['outputs.NamedRole']]:
        return pulumi.get(self, "edge_router_roles_display")

    @property
    @pulumi.getter
    def id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def semantic(self) -> pulumi.Output[str]:
        return pulumi.get(self, "semantic")

    @property
    @pulumi.getter(name="serviceRoles")
    def service_roles(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "service_roles")

    @property
    @pulumi.getter(name="serviceRolesDisplay")
    def service_roles_display(self) -> pulumi.Output[Sequence['outputs.NamedRole']]:
        return pulumi.get(self, "service_roles_display")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        return pulumi.get(self, "updated_at")

