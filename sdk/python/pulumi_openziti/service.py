# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from . import rest_model as _rest_model

__all__ = ['ServiceArgs', 'Service']

@pulumi.input_type
class ServiceArgs:
    def __init__(__self__, *,
                 configs: pulumi.Input[Sequence[pulumi.Input[str]]],
                 encryption_required: pulumi.Input[bool],
                 name: pulumi.Input[str],
                 role_attributes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 terminator_strategy: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Service resource.
        """
        ServiceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            configs=configs,
            encryption_required=encryption_required,
            name=name,
            role_attributes=role_attributes,
            tags=tags,
            terminator_strategy=terminator_strategy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             configs: pulumi.Input[Sequence[pulumi.Input[str]]],
             encryption_required: pulumi.Input[bool],
             name: pulumi.Input[str],
             role_attributes: pulumi.Input[Sequence[pulumi.Input[str]]],
             tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             terminator_strategy: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("configs", configs)
        _setter("encryption_required", encryption_required)
        _setter("name", name)
        _setter("role_attributes", role_attributes)
        if tags is not None:
            _setter("tags", tags)
        if terminator_strategy is not None:
            _setter("terminator_strategy", terminator_strategy)

    @property
    @pulumi.getter
    def configs(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "configs", value)

    @property
    @pulumi.getter(name="encryptionRequired")
    def encryption_required(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "encryption_required")

    @encryption_required.setter
    def encryption_required(self, value: pulumi.Input[bool]):
        pulumi.set(self, "encryption_required", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="roleAttributes")
    def role_attributes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "role_attributes")

    @role_attributes.setter
    def role_attributes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "role_attributes", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="terminatorStrategy")
    def terminator_strategy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "terminator_strategy")

    @terminator_strategy.setter
    def terminator_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "terminator_strategy", value)


class Service(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 configs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 encryption_required: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 role_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 terminator_strategy: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Service resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Service resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            ServiceArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 configs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 encryption_required: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 role_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 terminator_strategy: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceArgs.__new__(ServiceArgs)

            if configs is None and not opts.urn:
                raise TypeError("Missing required property 'configs'")
            __props__.__dict__["configs"] = configs
            if encryption_required is None and not opts.urn:
                raise TypeError("Missing required property 'encryption_required'")
            __props__.__dict__["encryption_required"] = encryption_required
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if role_attributes is None and not opts.urn:
                raise TypeError("Missing required property 'role_attributes'")
            __props__.__dict__["role_attributes"] = role_attributes
            __props__.__dict__["tags"] = tags
            __props__.__dict__["terminator_strategy"] = terminator_strategy
            __props__.__dict__["_links"] = None
            __props__.__dict__["config"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["id"] = None
            __props__.__dict__["permissions"] = None
            __props__.__dict__["posture_queries"] = None
            __props__.__dict__["updated_at"] = None
        super(Service, __self__).__init__(
            'openziti:index:Service',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Service':
        """
        Get an existing Service resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ServiceArgs.__new__(ServiceArgs)

        __props__.__dict__["_links"] = None
        __props__.__dict__["config"] = None
        __props__.__dict__["configs"] = None
        __props__.__dict__["created_at"] = None
        __props__.__dict__["encryption_required"] = None
        __props__.__dict__["id"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["permissions"] = None
        __props__.__dict__["posture_queries"] = None
        __props__.__dict__["role_attributes"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["terminator_strategy"] = None
        __props__.__dict__["updated_at"] = None
        return Service(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def _links(self) -> pulumi.Output[Mapping[str, 'outputs.Link']]:
        return pulumi.get(self, "_links")

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output[Mapping[str, Mapping[str, Any]]]:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def configs(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="encryptionRequired")
    def encryption_required(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "encryption_required")

    @property
    @pulumi.getter
    def id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter(name="postureQueries")
    def posture_queries(self) -> pulumi.Output[Sequence['outputs.PostureQueriesType']]:
        return pulumi.get(self, "posture_queries")

    @property
    @pulumi.getter(name="roleAttributes")
    def role_attributes(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "role_attributes")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="terminatorStrategy")
    def terminator_strategy(self) -> pulumi.Output[str]:
        return pulumi.get(self, "terminator_strategy")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        return pulumi.get(self, "updated_at")

