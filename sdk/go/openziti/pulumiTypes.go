// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openziti

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"internal"
)

var _ = internal.GetEnvOrDefault

type EntityRef struct {
	_links map[string]Link `pulumi:"_links"`
	Entity *string         `pulumi:"entity"`
	Id     *string         `pulumi:"id"`
	Name   *string         `pulumi:"name"`
}

type EntityRefOutput struct{ *pulumi.OutputState }

func (EntityRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityRef)(nil)).Elem()
}

func (o EntityRefOutput) ToEntityRefOutput() EntityRefOutput {
	return o
}

func (o EntityRefOutput) ToEntityRefOutputWithContext(ctx context.Context) EntityRefOutput {
	return o
}

func (o EntityRefOutput) ToOutput(ctx context.Context) pulumix.Output[EntityRef] {
	return pulumix.Output[EntityRef]{
		OutputState: o.OutputState,
	}
}

func (o EntityRefOutput) _links() LinkMapOutput {
	return o.ApplyT(func(v EntityRef) map[string]Link { return v._links }).(LinkMapOutput)
}

func (o EntityRefOutput) Entity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityRef) *string { return v.Entity }).(pulumi.StringPtrOutput)
}

func (o EntityRefOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityRef) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o EntityRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type Link struct {
	Comment *string `pulumi:"comment"`
	Href    string  `pulumi:"href"`
	Method  *string `pulumi:"method"`
}

type LinkOutput struct{ *pulumi.OutputState }

func (LinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Link)(nil)).Elem()
}

func (o LinkOutput) ToLinkOutput() LinkOutput {
	return o
}

func (o LinkOutput) ToLinkOutputWithContext(ctx context.Context) LinkOutput {
	return o
}

func (o LinkOutput) ToOutput(ctx context.Context) pulumix.Output[Link] {
	return pulumix.Output[Link]{
		OutputState: o.OutputState,
	}
}

func (o LinkOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Link) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o LinkOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v Link) string { return v.Href }).(pulumi.StringOutput)
}

func (o LinkOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Link) *string { return v.Method }).(pulumi.StringPtrOutput)
}

type LinkMapOutput struct{ *pulumi.OutputState }

func (LinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Link)(nil)).Elem()
}

func (o LinkMapOutput) ToLinkMapOutput() LinkMapOutput {
	return o
}

func (o LinkMapOutput) ToLinkMapOutputWithContext(ctx context.Context) LinkMapOutput {
	return o
}

func (o LinkMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]Link] {
	return pulumix.Output[map[string]Link]{
		OutputState: o.OutputState,
	}
}

func (o LinkMapOutput) MapIndex(k pulumi.StringInput) LinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Link {
		return vs[0].(map[string]Link)[vs[1].(string)]
	}).(LinkOutput)
}

func init() {
	pulumi.RegisterOutputType(EntityRefOutput{})
	pulumi.RegisterOutputType(LinkOutput{})
	pulumi.RegisterOutputType(LinkMapOutput{})
}
