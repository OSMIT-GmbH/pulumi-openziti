// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openziti

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"internal"
)

type EdgeRouterPolicy struct {
	pulumi.CustomResourceState

	_links                 LinkMapOutput            `pulumi:"_links"`
	CreatedAt              pulumi.StringOutput      `pulumi:"createdAt"`
	EdgeRouterRoles        pulumi.StringArrayOutput `pulumi:"edgeRouterRoles"`
	EdgeRouterRolesDisplay NamedRoleArrayOutput     `pulumi:"edgeRouterRolesDisplay"`
	Id                     pulumi.StringOutput      `pulumi:"id"`
	IdentityRoles          pulumi.StringArrayOutput `pulumi:"identityRoles"`
	IdentityRolesDisplay   NamedRoleArrayOutput     `pulumi:"identityRolesDisplay"`
	Name                   pulumi.StringOutput      `pulumi:"name"`
	Semantic               pulumi.StringOutput      `pulumi:"semantic"`
	Tags                   pulumi.MapOutput         `pulumi:"tags"`
	UpdatedAt              pulumi.StringOutput      `pulumi:"updatedAt"`
}

// NewEdgeRouterPolicy registers a new resource with the given unique name, arguments, and options.
func NewEdgeRouterPolicy(ctx *pulumi.Context,
	name string, args *EdgeRouterPolicyArgs, opts ...pulumi.ResourceOption) (*EdgeRouterPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IdentityRoles == nil {
		return nil, errors.New("invalid value for required argument 'IdentityRoles'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Semantic == nil {
		return nil, errors.New("invalid value for required argument 'Semantic'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EdgeRouterPolicy
	err := ctx.RegisterResource("openziti:index:EdgeRouterPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEdgeRouterPolicy gets an existing EdgeRouterPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEdgeRouterPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EdgeRouterPolicyState, opts ...pulumi.ResourceOption) (*EdgeRouterPolicy, error) {
	var resource EdgeRouterPolicy
	err := ctx.ReadResource("openziti:index:EdgeRouterPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EdgeRouterPolicy resources.
type edgeRouterPolicyState struct {
}

type EdgeRouterPolicyState struct {
}

func (EdgeRouterPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeRouterPolicyState)(nil)).Elem()
}

type edgeRouterPolicyArgs struct {
	EdgeRouterRoles []string               `pulumi:"edgeRouterRoles"`
	IdentityRoles   []string               `pulumi:"identityRoles"`
	Name            string                 `pulumi:"name"`
	Semantic        string                 `pulumi:"semantic"`
	Tags            map[string]interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a EdgeRouterPolicy resource.
type EdgeRouterPolicyArgs struct {
	EdgeRouterRoles pulumi.StringArrayInput
	IdentityRoles   pulumi.StringArrayInput
	Name            pulumi.StringInput
	Semantic        pulumi.StringInput
	Tags            pulumi.MapInput
}

func (EdgeRouterPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeRouterPolicyArgs)(nil)).Elem()
}

type EdgeRouterPolicyInput interface {
	pulumi.Input

	ToEdgeRouterPolicyOutput() EdgeRouterPolicyOutput
	ToEdgeRouterPolicyOutputWithContext(ctx context.Context) EdgeRouterPolicyOutput
}

func (*EdgeRouterPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeRouterPolicy)(nil)).Elem()
}

func (i *EdgeRouterPolicy) ToEdgeRouterPolicyOutput() EdgeRouterPolicyOutput {
	return i.ToEdgeRouterPolicyOutputWithContext(context.Background())
}

func (i *EdgeRouterPolicy) ToEdgeRouterPolicyOutputWithContext(ctx context.Context) EdgeRouterPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeRouterPolicyOutput)
}

func (i *EdgeRouterPolicy) ToOutput(ctx context.Context) pulumix.Output[*EdgeRouterPolicy] {
	return pulumix.Output[*EdgeRouterPolicy]{
		OutputState: i.ToEdgeRouterPolicyOutputWithContext(ctx).OutputState,
	}
}

type EdgeRouterPolicyOutput struct{ *pulumi.OutputState }

func (EdgeRouterPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeRouterPolicy)(nil)).Elem()
}

func (o EdgeRouterPolicyOutput) ToEdgeRouterPolicyOutput() EdgeRouterPolicyOutput {
	return o
}

func (o EdgeRouterPolicyOutput) ToEdgeRouterPolicyOutputWithContext(ctx context.Context) EdgeRouterPolicyOutput {
	return o
}

func (o EdgeRouterPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[*EdgeRouterPolicy] {
	return pulumix.Output[*EdgeRouterPolicy]{
		OutputState: o.OutputState,
	}
}

func (o EdgeRouterPolicyOutput) _links() LinkMapOutput {
	return o.ApplyT(func(v *EdgeRouterPolicy) LinkMapOutput { return v._links }).(LinkMapOutput)
}

func (o EdgeRouterPolicyOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeRouterPolicy) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o EdgeRouterPolicyOutput) EdgeRouterRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EdgeRouterPolicy) pulumi.StringArrayOutput { return v.EdgeRouterRoles }).(pulumi.StringArrayOutput)
}

func (o EdgeRouterPolicyOutput) EdgeRouterRolesDisplay() NamedRoleArrayOutput {
	return o.ApplyT(func(v *EdgeRouterPolicy) NamedRoleArrayOutput { return v.EdgeRouterRolesDisplay }).(NamedRoleArrayOutput)
}

func (o EdgeRouterPolicyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeRouterPolicy) pulumi.StringOutput { return v.Id }).(pulumi.StringOutput)
}

func (o EdgeRouterPolicyOutput) IdentityRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EdgeRouterPolicy) pulumi.StringArrayOutput { return v.IdentityRoles }).(pulumi.StringArrayOutput)
}

func (o EdgeRouterPolicyOutput) IdentityRolesDisplay() NamedRoleArrayOutput {
	return o.ApplyT(func(v *EdgeRouterPolicy) NamedRoleArrayOutput { return v.IdentityRolesDisplay }).(NamedRoleArrayOutput)
}

func (o EdgeRouterPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeRouterPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o EdgeRouterPolicyOutput) Semantic() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeRouterPolicy) pulumi.StringOutput { return v.Semantic }).(pulumi.StringOutput)
}

func (o EdgeRouterPolicyOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *EdgeRouterPolicy) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

func (o EdgeRouterPolicyOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeRouterPolicy) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeRouterPolicyInput)(nil)).Elem(), &EdgeRouterPolicy{})
	pulumi.RegisterOutputType(EdgeRouterPolicyOutput{})
}
