// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openziti

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"internal"
)

type Service struct {
	pulumi.CustomResourceState

	_links             LinkMapOutput                 `pulumi:"_links"`
	Config             pulumi.MapMapOutput           `pulumi:"config"`
	Configs            pulumi.StringArrayOutput      `pulumi:"configs"`
	CreatedAt          pulumi.StringOutput           `pulumi:"createdAt"`
	EncryptionRequired pulumi.BoolOutput             `pulumi:"encryptionRequired"`
	Id                 pulumi.StringOutput           `pulumi:"id"`
	Name               pulumi.StringOutput           `pulumi:"name"`
	Permissions        pulumi.StringArrayOutput      `pulumi:"permissions"`
	PostureQueries     PostureQueriesTypeArrayOutput `pulumi:"postureQueries"`
	RoleAttributes     pulumi.StringArrayOutput      `pulumi:"roleAttributes"`
	Tags               pulumi.MapOutput              `pulumi:"tags"`
	TerminatorStrategy pulumi.StringOutput           `pulumi:"terminatorStrategy"`
	UpdatedAt          pulumi.StringOutput           `pulumi:"updatedAt"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configs == nil {
		return nil, errors.New("invalid value for required argument 'Configs'")
	}
	if args.EncryptionRequired == nil {
		return nil, errors.New("invalid value for required argument 'EncryptionRequired'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.RoleAttributes == nil {
		return nil, errors.New("invalid value for required argument 'RoleAttributes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Service
	err := ctx.RegisterResource("openziti:index:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("openziti:index:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
}

type ServiceState struct {
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	Configs            []string               `pulumi:"configs"`
	EncryptionRequired bool                   `pulumi:"encryptionRequired"`
	Name               string                 `pulumi:"name"`
	RoleAttributes     []string               `pulumi:"roleAttributes"`
	Tags               map[string]interface{} `pulumi:"tags"`
	TerminatorStrategy *string                `pulumi:"terminatorStrategy"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	Configs            pulumi.StringArrayInput
	EncryptionRequired pulumi.BoolInput
	Name               pulumi.StringInput
	RoleAttributes     pulumi.StringArrayInput
	Tags               pulumi.MapInput
	TerminatorStrategy pulumi.StringPtrInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

func (i *Service) ToOutput(ctx context.Context) pulumix.Output[*Service] {
	return pulumix.Output[*Service]{
		OutputState: i.ToServiceOutputWithContext(ctx).OutputState,
	}
}

type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

func (o ServiceOutput) ToOutput(ctx context.Context) pulumix.Output[*Service] {
	return pulumix.Output[*Service]{
		OutputState: o.OutputState,
	}
}

func (o ServiceOutput) _links() LinkMapOutput {
	return o.ApplyT(func(v *Service) LinkMapOutput { return v._links }).(LinkMapOutput)
}

func (o ServiceOutput) Config() pulumi.MapMapOutput {
	return o.ApplyT(func(v *Service) pulumi.MapMapOutput { return v.Config }).(pulumi.MapMapOutput)
}

func (o ServiceOutput) Configs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Service) pulumi.StringArrayOutput { return v.Configs }).(pulumi.StringArrayOutput)
}

func (o ServiceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o ServiceOutput) EncryptionRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v *Service) pulumi.BoolOutput { return v.EncryptionRequired }).(pulumi.BoolOutput)
}

func (o ServiceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Id }).(pulumi.StringOutput)
}

func (o ServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ServiceOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Service) pulumi.StringArrayOutput { return v.Permissions }).(pulumi.StringArrayOutput)
}

func (o ServiceOutput) PostureQueries() PostureQueriesTypeArrayOutput {
	return o.ApplyT(func(v *Service) PostureQueriesTypeArrayOutput { return v.PostureQueries }).(PostureQueriesTypeArrayOutput)
}

func (o ServiceOutput) RoleAttributes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Service) pulumi.StringArrayOutput { return v.RoleAttributes }).(pulumi.StringArrayOutput)
}

func (o ServiceOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *Service) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

func (o ServiceOutput) TerminatorStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.TerminatorStrategy }).(pulumi.StringOutput)
}

func (o ServiceOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInput)(nil)).Elem(), &Service{})
	pulumi.RegisterOutputType(ServiceOutput{})
}
