// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openziti

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"internal"
)

type ServicePolicy struct {
	pulumi.CustomResourceState

	_assimilated             pulumi.BoolOutput        `pulumi:"_assimilated"`
	_links                   LinkMapOutput            `pulumi:"_links"`
	CreatedAt                pulumi.StringOutput      `pulumi:"createdAt"`
	Id                       pulumi.StringOutput      `pulumi:"id"`
	IdentityRoles            pulumi.StringArrayOutput `pulumi:"identityRoles"`
	IdentityRolesDisplay     NamedRoleArrayOutput     `pulumi:"identityRolesDisplay"`
	Name                     pulumi.StringOutput      `pulumi:"name"`
	PostureCheckRoles        pulumi.StringArrayOutput `pulumi:"postureCheckRoles"`
	PostureCheckRolesDisplay NamedRoleArrayOutput     `pulumi:"postureCheckRolesDisplay"`
	Semantic                 pulumi.StringOutput      `pulumi:"semantic"`
	ServiceRoles             pulumi.StringArrayOutput `pulumi:"serviceRoles"`
	ServiceRolesDisplay      NamedRoleArrayOutput     `pulumi:"serviceRolesDisplay"`
	Tags                     pulumi.MapOutput         `pulumi:"tags"`
	Type                     pulumi.StringOutput      `pulumi:"type"`
	UpdatedAt                pulumi.StringOutput      `pulumi:"updatedAt"`
}

// NewServicePolicy registers a new resource with the given unique name, arguments, and options.
func NewServicePolicy(ctx *pulumi.Context,
	name string, args *ServicePolicyArgs, opts ...pulumi.ResourceOption) (*ServicePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IdentityRoles == nil {
		return nil, errors.New("invalid value for required argument 'IdentityRoles'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Semantic == nil {
		return nil, errors.New("invalid value for required argument 'Semantic'")
	}
	if args.ServiceRoles == nil {
		return nil, errors.New("invalid value for required argument 'ServiceRoles'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServicePolicy
	err := ctx.RegisterResource("openziti:index:ServicePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServicePolicy gets an existing ServicePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServicePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServicePolicyState, opts ...pulumi.ResourceOption) (*ServicePolicy, error) {
	var resource ServicePolicy
	err := ctx.ReadResource("openziti:index:ServicePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServicePolicy resources.
type servicePolicyState struct {
}

type ServicePolicyState struct {
}

func (ServicePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*servicePolicyState)(nil)).Elem()
}

type servicePolicyArgs struct {
	IdentityRoles     []string               `pulumi:"identityRoles"`
	Name              string                 `pulumi:"name"`
	PostureCheckRoles []string               `pulumi:"postureCheckRoles"`
	Semantic          string                 `pulumi:"semantic"`
	ServiceRoles      []string               `pulumi:"serviceRoles"`
	Tags              map[string]interface{} `pulumi:"tags"`
	Type              string                 `pulumi:"type"`
}

// The set of arguments for constructing a ServicePolicy resource.
type ServicePolicyArgs struct {
	IdentityRoles     pulumi.StringArrayInput
	Name              pulumi.StringInput
	PostureCheckRoles pulumi.StringArrayInput
	Semantic          pulumi.StringInput
	ServiceRoles      pulumi.StringArrayInput
	Tags              pulumi.MapInput
	Type              pulumi.StringInput
}

func (ServicePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*servicePolicyArgs)(nil)).Elem()
}

type ServicePolicyInput interface {
	pulumi.Input

	ToServicePolicyOutput() ServicePolicyOutput
	ToServicePolicyOutputWithContext(ctx context.Context) ServicePolicyOutput
}

func (*ServicePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePolicy)(nil)).Elem()
}

func (i *ServicePolicy) ToServicePolicyOutput() ServicePolicyOutput {
	return i.ToServicePolicyOutputWithContext(context.Background())
}

func (i *ServicePolicy) ToServicePolicyOutputWithContext(ctx context.Context) ServicePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePolicyOutput)
}

func (i *ServicePolicy) ToOutput(ctx context.Context) pulumix.Output[*ServicePolicy] {
	return pulumix.Output[*ServicePolicy]{
		OutputState: i.ToServicePolicyOutputWithContext(ctx).OutputState,
	}
}

type ServicePolicyOutput struct{ *pulumi.OutputState }

func (ServicePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePolicy)(nil)).Elem()
}

func (o ServicePolicyOutput) ToServicePolicyOutput() ServicePolicyOutput {
	return o
}

func (o ServicePolicyOutput) ToServicePolicyOutputWithContext(ctx context.Context) ServicePolicyOutput {
	return o
}

func (o ServicePolicyOutput) ToOutput(ctx context.Context) pulumix.Output[*ServicePolicy] {
	return pulumix.Output[*ServicePolicy]{
		OutputState: o.OutputState,
	}
}

func (o ServicePolicyOutput) _assimilated() pulumi.BoolOutput {
	return o.ApplyT(func(v *ServicePolicy) pulumi.BoolOutput { return v._assimilated }).(pulumi.BoolOutput)
}

func (o ServicePolicyOutput) _links() LinkMapOutput {
	return o.ApplyT(func(v *ServicePolicy) LinkMapOutput { return v._links }).(LinkMapOutput)
}

func (o ServicePolicyOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePolicy) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o ServicePolicyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePolicy) pulumi.StringOutput { return v.Id }).(pulumi.StringOutput)
}

func (o ServicePolicyOutput) IdentityRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServicePolicy) pulumi.StringArrayOutput { return v.IdentityRoles }).(pulumi.StringArrayOutput)
}

func (o ServicePolicyOutput) IdentityRolesDisplay() NamedRoleArrayOutput {
	return o.ApplyT(func(v *ServicePolicy) NamedRoleArrayOutput { return v.IdentityRolesDisplay }).(NamedRoleArrayOutput)
}

func (o ServicePolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ServicePolicyOutput) PostureCheckRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServicePolicy) pulumi.StringArrayOutput { return v.PostureCheckRoles }).(pulumi.StringArrayOutput)
}

func (o ServicePolicyOutput) PostureCheckRolesDisplay() NamedRoleArrayOutput {
	return o.ApplyT(func(v *ServicePolicy) NamedRoleArrayOutput { return v.PostureCheckRolesDisplay }).(NamedRoleArrayOutput)
}

func (o ServicePolicyOutput) Semantic() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePolicy) pulumi.StringOutput { return v.Semantic }).(pulumi.StringOutput)
}

func (o ServicePolicyOutput) ServiceRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServicePolicy) pulumi.StringArrayOutput { return v.ServiceRoles }).(pulumi.StringArrayOutput)
}

func (o ServicePolicyOutput) ServiceRolesDisplay() NamedRoleArrayOutput {
	return o.ApplyT(func(v *ServicePolicy) NamedRoleArrayOutput { return v.ServiceRolesDisplay }).(NamedRoleArrayOutput)
}

func (o ServicePolicyOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *ServicePolicy) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

func (o ServicePolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePolicy) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o ServicePolicyOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePolicy) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePolicyInput)(nil)).Elem(), &ServicePolicy{})
	pulumi.RegisterOutputType(ServicePolicyOutput{})
}
